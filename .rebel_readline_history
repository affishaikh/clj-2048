1581152790294:(nth [[0 0] [1 1]] 1)
1581152843759:(take 2 3 [1 2 3 4 5])
1581152858946:(take -3 [1 2 3 4 5])
1581152976377:(take-last 3 [1 2 3 4 5])
1581152997415:(nth [[0 0] [1 1]] 1)
1581153048169:(Math/pow 2 2)
1581153078769:(take 2 [2 2 0 0])
1581153309377:(concat (take 2 [2 2 0 0]) (list 2) (take-last 1 [2 2 0 0]))
1581153968883:[2 0 2 0]
1581154026457:(keep-indexed #(when (zero? %2) %1) [2 0 2 0])
1581154154387:(mapcat (fn [r] (keep-indexed #(when (zero? %2) %1) r)) [[2 0 2 0]])
1581154186545:(map (fn [r] (keep-indexed #(when (zero? %2) %1) r)) [[2 0 2 0]])
1581154218909:(map (fn [i r] (keep-indexed #(when (zero? %2) [i %1]) r)) [[2 0 2 0]])
1581154228434:(map-indexed (fn [i r] (keep-indexed #(when (zero? %2) [i %1]) r)) [[2 0 2 0]])
1581154255044:(map-indexed (fn [i r] (keep-indexed #(when (zero? %2) [i %1]) r)) [[2 0 2 0][2 0 2 0]])
1581154282494:(mapcat identity (map-indexed (fn [i r] (keep-indexed #(when (zero? %2) [i %1]) r)) [[2 0 2 0][2 0 2 0]]))
1581154373418:(rand (count (mapcat identity (map-indexed (fn [i r] (keep-indexed #(when (zero? %2) [i %1]) r)) [[2 0 2 0][2 0 2 0]]))))
1581154381434:(rand-int (count (mapcat identity (map-indexed (fn [i r] (keep-indexed #(when (zero? %2) [i %1]) r)) [[2 0 2 0][2 0 2 0]]))))
1581154414915:(count (mapcat identity (map-indexed (fn [i r] (keep-indexed #(when (zero? %2) [i %1]) r)) [[2 0 2 0][2 0 2 0]])))
1581154869120:(keep-indexed #(.contains) [[2 0 2 0][2 0 2 0]])))
1581154878287:(.contains [1 2] 1)
1581154890474:(.contains [1 2])
1581154893530:(.contains 1 [1 2])
1581154905962:(.contains {:a 1} :a)
1581154948336:(keep-indexed #(when (some #{0} %2) %1) [[2 0 2 0][2 0 2 0]])))
1581154970080:(keep-indexed #(when (some #{0} %2) %1) [[2 0 2 0][2 0 2 0]]))
1581154975376:(keep-indexed #(when (some #{0} %2) %1) [[2 0 2 0][2 0 2 0]])
1581155025735:(randd [1 2 3])
1581155028375:(rand [1 2 3])
1581155071180:(keep-indexed #(when (some #{0} %2) %1) [[2 0 2 0][2 0 2 0]])
1581155108819:(defn insert-2 \n  [board]\n  (keep-indexed #(when (some #{0} %2) %1) [[2 0 2 0][2 0 2 0]]))
1581155127402:(insert-2 [[0 1][1 1]])
1581155139237:(defn insert-2 \n  [board]\n  (keep-indexed #(when (some #{0} %2) %1) [[2 0 2 0][2 0 2 0]]))
1581155143163:(insert-2 [[1 1][1 1]])
1581155156175:(some #{0} [1 1])
1581155230455:(keep-indexed (fn [i x] x) [1 1 2 2])
1581155233991:(keep-indexed (fn [i x] x) [1 1 nil 2])
1581155238975:(keep-indexed (fn [i x] i) [1 1 nil 2])
1581155245263:(keep-indexed (fn [i x] nil) [1 1 nil 2])
1581155284864:(keep-indexed (fn [i x] (if (zero? x) i nil)) [1 1 0 2])
1581155351834:(defn insert-2 \n  [board]\n  (keep-indexed #(when (some #{0} %2) %1) [[2 0 2 0][2 0 2 0]]))
1581155359177:(defn insert-2 \n  [board]\n  (keep-indexed #(when (some #{0} %2) %1) board))
1581155362296:(insert-2 [[1 1][1 1]])
1581155367175:(insert-2 [[1 1][1 0]])
1581155369824:(insert-2 [[1 0][1 0]])
1581155392795:(defn insert-2 \n  [board]\n  (keep-indexed #(when (some #{0} %2) %1) board))
1581155455145:(rand-nth [1 2 3 4])
1581155492550:(defn insert-2 \n  [board]\n  (keep-indexed #(when (some #{0} %2) %1) board))
1581155612152:(rand-nth [1 2 3 4])
1581155644657:(defn insert-2 \n  [board]\n  (rand-nth (keep-indexed #(when (some #{0} %2) %1) board)))
1581155650288:(insert-2 [[1 0][1 0]])
1581155750846:(defn insert-2 \n  [board]\n  (rand-nth (keep-indexed #(when (some #{0} %2) %1) board)))
1581155790688:(defn get-index\n  [board]\n  ())
1581155803250:(defn get-index\n  [board]\n  (rand-nth (keep-indexed #(when (some #{0} %2) %1) board)))
1581155818041:(get-index [[0 1] [1 0]])
1581155828074:(defn get-index\n  [board]\n  (rand-nth (keep-indexed #(when (some #{0} %2) %1) board)))
1581155837560:(get-index [0 1])
1581155864699:(defn get-index\n  [board]\n  (rand-nth (keep-indexed #(when (zero? %2) %1) board)))
1581155866353:(get-index [0 1])
1581155873009:(get-index [0 0 0 0])
1581155916014:(defn get-index\n  [board]\n  (rand-nth (keep-indexed #(when (zero? %2) %1) board)))
1581155925740:(when-let [x 1] 1)
1581155928820:(when-let [x nil] 1)
1581156012860:(defn zero-indexed\n  [board]\n  (rand-nth (keep-indexed #(when (zero? %2) %1) board)))
1581156068215:(sequential? [])
1581156071471:(sequential? '())
1581156074295:(sequential? {})
1581156106331:(cond sequential?\n      [] 1)
1581156124600:(condp sequential?\n      [] 1)
1581156144716:(condp sequential?\n      {} 2)
1581156176816:(condp sequential?\n      {} 2\n       3)
1581156183816:(condp sequential?\n      {} 2\n      3)
1581156239056:(defn foo [v] \n  (condp = v\n    1 :one\n    2 :two\n    :three))
1581156243977:(foo 2)
1581156245655:(foo 1)
1581156247655:(foo 5)
1581156284147:(defn foo [v] \n  (condp sequential?\n    v :one\n    v :two\n    :three))
1581156295954:(foo [])
1581156485143:(defn foo [v] \n  (cond\n    (sequential? v) ()\n    v :two\n    :three))
1581156490357:(range -1 2)
1581156509310:(defn foo [v] \n  (cond\n    (sequential? v) ()\n    v :two\n    :three))
1581156541494:(defn foo [v] \n  (cond\n    (sequential? v) (= 1 1)\n    :else (= 1 2)))
1581156546303:(foo [])
1581156548618:(foo 2)
1581156571255:(defn zero-indexed\n  [board]\n  (rand-nth (keep-indexed #(when (zero? %2) %1) board)))
1581156612121:(defn zero-indexed\n  [board]\n  (cond \n    (sequential? board) (rand-nth (keep-indexed #(when (zero? %2) %1) board))))
1581156639871:(zero-indexed [[2 0 2 0] [1 1 1 1]])
1581156663631:(defn zero-indexed\n  [board]\n  (cond \n    (sequential? board) (rand-nth (keep-indexed #(when (zero? %2) %1) board))))
1581156670373:(rand-nth [])
1581156686519:(defn zero-indexed\n  [board]\n  (cond \n    (sequential? board) (rand-nth (keep-indexed #(when (some #{0} %2) %1) board))))
1581156689741:(zero-indexed [[2 0 2 0] [1 1 1 1]])
1581156703422:(zero-indexed [[0] [0] [0] [0]])
1581156788546:(defn zero-indexed\n  [board]\n  (if \n    (sequential? board) (rand-nth (keep-indexed #(when (some #{0} %2) %1) board))\n    (rand-nth (keep-indexed #(when (zero? %2) %1) board))))
1581156802887:(zero-indexed [1 2 3 0])
1581156818065:(defn zero-indexed\n  [board]\n  (if \n    (sequential? board) (rand-nth (keep-indexed #(when (some #{0} %2) %1) board))\n    (rand-nth (keep-indexed #(when (zero? %2) %1) board))))
1581156845053:(defn zero-indexed\n  [board]\n  (if \n    (sequential? (first board)) (rand-nth (keep-indexed #(when (some #{0} %2) %1) board))\n    (rand-nth (keep-indexed #(when (zero? %2) %1) board))))
1581156848067:(zero-indexed [1 2 3 0])
1581156857474:(zero-indexed [[1 2 3 0]])
1581157125947:(nth [[0 2]] (zero-indexed [[0 2]]))
1581157168379:(defn get-index\n  [board]\n  (rand-nth (keep-indexed #(when (zero? %2) %1) board)))
1581157208071:(count (mapcat identity (map-indexed (fn [i r] (keep-indexed #(when (zero? %2) [i %1]) r)) [[2 0 2 0][2 0 2 0]])))
1581157227182:(mapcat identity (map-indexed (fn [i r] (keep-indexed #(when (zero? %2) [i %1]) r)) [[2 0 2 0][2 0 2 0]]))
1581157259165:(defn [board]\n  (mapcat identity \n          (map-indexed \n           (fn [i r] (keep-indexed #(when (zero? %2) [i %1]) r)) board)))
1581157303090:(defn insert-2 [board]\n  (mapcat identity \n          (map-indexed \n           (fn [i r] (keep-indexed #(when (zero? %2) [i %1]) r)) board)))
1581157318361:(insert-2 [[0 1]])
1581157388370:(take 0 [[0 1]])
1581157393450:(take 1 [[0 1]])
1581157471387:(concat (take 1 [0 0 2 2]) (list 2) (take-last 2 [0 0 2 2]))
1581157594240:(defn insert-into-row \n  [r i] \n  (concat (take i [0 0 2 2]) (list 2) (take-last (inc i) row)))
1581157603694:(defn insert-into-row \n  [r i] \n  (concat (take i [0 0 2 2]) (list 2) (take-last (inc i) r)))
1581157619068:(insert-into-row [2 2 0 0] 2)
1581157629125:(defn insert-into-row \n  [r i] \n  (concat (take i r) (list 2) (take-last (inc i) r)))
1581157631083:(insert-into-row [2 2 0 0] 2)
1581157650455:(defn insert-into-row \n  [r i] \n  (concat (take i r) (list 2) (take-last (dec i) r)))
1581157652405:(insert-into-row [2 2 0 0] 2)
1581157695413:(insert-into-row [] 2)
1581157706838:(defn insert-into-row \n  [r l i] \n  (concat (take i r) l (take-last (dec i) r)))
1581157731404:(insert-into-row [[] [] [] []] [1 2] 2)
1581157760503:(defn insert-into-row \n  [r i] \n  (concat (take i r) (list 2) (take-last (dec i) r)))
1581157764301:(insert-into-row [2 2 0 0] 2)
1581157789685:(def board [[0 1] [0 2]])
1581157825862:(concat (take 1 board) [2 2] (take-last 0 board))
1581157834302:(concat (take 1 board) [[2 2]] (take-last 0 board))
1581157873216:(defn insert-into-row \n  [r l i] \n  (concat (take i r) [l] (take-last (dec i) r)))
1581157905232:(assoc-in [[1 2] [3 4]] [1 1] 5)
1581158861502:(defn insert-2 [board]\n  (mapcat identity \n          (map-indexed \n           (fn [i r] (keep-indexed #(when (zero? %2) [i %1]) r)) board)))
1581159286865:(for [x (range )]\n  )
1581159290647:(range 3)
1581159357331:(for [x (range 4) y (range 4) :when ()])
1581159371881:(get-in [1 2] 1)
1581159380146:(get-in 1 [1 2])
1581159392138:(get-in [[1]] [0 0])
1581159441641:(for [x (range 4) y (range 4) :when (= (get-in board) [x y]))] [x y])
1581159468633:(defn get-index\n  (for [x (range 4) y (range 4) :when (= (get-in board) [x y]))] [x y]))
1581159485464:(defn get-index \n  [board]\n  (for [x (range 4) y (range 4) :when (= (get-in board) [x y]))] [x y]))
1581159494384:(defn get-index \n  [board]\n  (for [x (range 4) y (range 4) :when (= (get-in board) [x y])) [x y]]))
1581159507342:(defn get-index \n  [board]\n  (for [x (range 4) y (range 4) :when (= (get-in board) [x y]))] [x y]))
1581159525557:(defn get-index \n  [board]\n  (for [x (range 4) y (range 4) :when (= (get-in board [x y]) [x y]))] [x y]))
1581159538669:(defn get-index \n  [board]\n  (for [x (range 4) y (range 4) :when (= (get-in board [x y]) 0))] [x y]))
1581159580201:(for [x (range 10) :when (even? x) x])
1581159583818:(for [x (range 10) :when (even? x)] x)
1581159606218:(defn get-index \n  [board]\n  (for [x (range 4) y (range 4) :when (= (get-in board [x y]) 0))] [x y]))
1581159624640:(for [x (range 10) y (range 10) :when (even? x) x])
1581159637096:(for [x (range 10) y (range 10) ] [x y])
1581159649831:(for [x (range 10) y (range 10)] [x y])
1581159671763:(defn get-index \n  [board]\n  (for [x (range 4) y (range 4) :when (= (get-in board [x y]) 0))] [x y]))
1581159689313:(get-in [[0 2] [2 0]] [1 1])
1581159706208:(defn get-index \n  [board]\n  (for [x (range 4) y (range 4) :when (= (get-in board [x y]) 0)] [x y]))
1581159740543:(def board [[0 2 0 2] [2 0 2 0] [2 2 2 2] [0 2 0 2]])
1581159742877:board
1581159759430:(get-index board)
1581159766533:(rand-nth (get-index board))
1581159789621:(get-index board)
1581159797030:(rand-nth (get-index board))
1581159822597:(assoc-in board (rand-nth (get-index board)) 2)
1581159834170:board
1581159881847:(defn insert-2 \n  [board]\n  (assoc-in board (for [x (range 4) y (range 4) :when (= (get-in board [x y]) 0)] [x y])) 2)
1581159905034:(defn insert-2 \n  [board]\n  (assoc-in board (for [x (range 4) y (range 4) :when (= (get-in board [x y]) 0)] [x y]) 2))
1581159912797:(insert-2 board)
1581159955882:(defn insert-2 \n  [board]\n  (assoc-in board \n            (rand-nth (for [x (range 4) y (range 4) :when (= (get-in board [x y]) 0)] [x y])) 2))
1581159958190:(insert-2 board)
1581159962285:board
1581159964941:(insert-2 board)
1581160000041:(defn insert-2 \n  [board]\n  (assoc-in board \n            (rand-nth (for [x (range 4) y (range 4) :when (= (get-in board [x y]) 0)] [x y])) 2))
1581160281227:(comp inc dec)
1581160307008:((comp inc (partial * 10)) 4)
1581160316704:(defn insert-2 \n  [board]\n  (assoc-in board \n            (rand-nth (for [x (range 4) y (range 4) :when (= (get-in board [x y]) 0)] [x y])) 2))
1581160335144:(insert-2 board)
1581160341339:board
1581160353663:(def board [[0 2 0 2] [2 0 2 0] [2 2 2 2] [0 2 0 2]])
1581160355093:(insert-2 board)
1581160379208:(defn move-left\n  [board]\n  (map\n    #(as-> %1 r\n           (remove zero? r)\n           (partition-by identity r)\n           (mapcat (partial partition-all 2 2) r)\n           (map (partial apply +) r)\n           (concat r (repeat (- 4 (count r)) 0))\n           )\n    board))
1581160390803:(move-left board)
1581160403932:(insert-2 (move-left board))
1581160414381:(move-left board)
1581160421301:(insert-2 board)
1581160423693:board
1581160442648:(insert-2 (move-left board))
1581160471370:(move-left board)
1581160522053:(nth '(1 2 3 4) 0)
1581160524885:(nth '(1 2 3 4) 2)
1581160548245:(def foo (move-left board))
1581160553203:foo
1581160560251:(insert-2 foo)
1581160640385:(defn insert-2 \n  [board]\n  (assoc-in board \n            (rand-nth (for [x (range (count board)) y (range (count board)) :when (= (get-in board [x y]) 0)] [x y])) 2))
1581160651474:foo
1581160655965:(def foo (move-left board))
1581160672161:move-left
1581160678790:(defn move-left\n  [board]\n  (map\n    #(as-> %1 r\n           (remove zero? r)\n           (partition-by identity r)\n           (mapcat (partial partition-all 2 2) r)\n           (map (partial apply +) r)\n           (concat r (repeat (- 4 (count r)) 0))\n           )\n    board))
1581160683858:(def foo (move-left board))
1581160689733:(defn insert-2 \n  [board]\n  (assoc-in board \n            (rand-nth (for [x (range (count board)) y (range (count board)) :when (= (get-in board [x y]) 0)] [x y])) 2))
1581160701192:foo
1581160704305:(def foo (move-left board))
1581160705952:foo
1581160708648:board
1581160725066:(def board [[0 2 0 2] [2 0 2 0] [2 2 2 2] [0 2 0 2]])
1581160730025:(def foo (move-left board))
1581160731104:foo
1581160748400:(insert-2 (move-left board))
1581160758288:(insert-2 board)
1581160763112:foo
1581160767501:(defn insert-2 \n  [board]\n  (assoc-in board \n            (rand-nth (for [x (range (count board)) y (range (count board)) :when (= (get-in board [x y]) 0)] [x y])) 2))
1581160811858:(defn move-left\n  [board]\n  (map\n    #(as-> %1 r\n           (remove zero? r)\n           (partition-by identity r)\n           (mapcat (partial partition-all 2 2) r)\n           (map (partial apply +) r)\n           (concat r (repeat (- 4 (count r)) 0))\n           (mapv vector ))\n    board))
1581160823889:(defn move-left\n  [board]\n  (map\n    #(as-> %1 r\n           (remove zero? r)\n           (partition-by identity r)\n           (mapcat (partial partition-all 2 2) r)\n           (map (partial apply +) r)\n           (concat r (repeat (- 4 (count r)) 0))\n           (mapv vector r))\n    board))
1581160829036:(insert-2 (move-left board))
1581160836362:(move-left board)
1581160900292:(defn move-left\n  [board]\n  (map\n    #(as-> %1 r\n           (remove zero? r)\n           (partition-by identity r)\n           (mapcat (partial partition-all 2 2) r)\n           (map vector r)\n           (map (partial apply +) r)\n           (concat r (repeat (- 4 (count r)) 0))\n       )\n    board))
1581160903383:(move-left board)
1581160914531:(defn move-left\n  [board]\n  (map\n    #(as-> %1 r\n           (remove zero? r)\n           (partition-by identity r)\n           (mapcat (partial partition-all 2 2) r)\n           (map (partial apply +) r)\n           (concat r (repeat (- 4 (count r)) 0))\n       )\n    board))
1581160925712:(def foo (move-left board))
1581160927678:foo
1581160957343:(def board [[4 0 0 0] [4 0 0 0] [4 4 0 0] [4 0 0 0]])
1581160963486:(insert-2 board)
1581160999850:(def board ((4 0 0 0) (4 0 0 0) (4 4 0 0) (4 0 0 0)))
1581161007466:(def board '((4 0 0 0) (4 0 0 0) (4 4 0 0) (4 0 0 0)))
1581161010184:(insert-2 board)
1581161040469:(get-in '((0 1)) [0 0])
1581161061138:(get-in [[0 1]] [0 0])
1581161067755:(defn move-left\n  [board]\n  (map\n    #(as-> %1 r\n           (remove zero? r)\n           (partition-by identity r)\n           (mapcat (partial partition-all 2 2) r)\n           (map (partial apply +) r)\n           (concat r (repeat (- 4 (count r)) 0))\n       )\n    board))
1581161073958:(defn move-left\n  [board]\n  (mapv\n    #(as-> %1 r\n           (remove zero? r)\n           (partition-by identity r)\n           (mapcat (partial partition-all 2 2) r)\n           (map (partial apply +) r)\n           (concat r (repeat (- 4 (count r)) 0))\n       )\n    board))
1581161082985:(move-left board)
1581161199614:(defn move-left\n  [board]\n  (mapv\n    #(as-> %1 r\n           (remove zero? r)\n           (partition-by identity r)\n           (mapcat (partial partition-all 2) r)\n           (map (partial apply +) r)\n           (concat r (repeat (- 4 (count r)) 0))\n           (vec r)\n       )\n    board))
1581161203747:(move-left board)
1581161496464:(defn move-up\n  [board]\n  (-> board\n      (transpose)\n      (move-left)\n      (transpose)))
1581161561934:(reverse [1 2 3 4])
